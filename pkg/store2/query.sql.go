// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package dinotebook

import (
	"context"
	"database/sql"
	"time"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (text, creator_id, created_at)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateEntryParams struct {
	Text      sql.NullString
	CreatorID string
	CreatedAt time.Time
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.Text, arg.CreatorID, arg.CreatedAt)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteEntry = `-- name: DeleteEntry :one
UPDATE entries
SET delete_time = $1
WHERE id = $2
RETURNING id, text, creator_id, created_at, updated_at, delete_time
`

type DeleteEntryParams struct {
	DeleteTime sql.NullTime
	ID         int32
}

func (q *Queries) DeleteEntry(ctx context.Context, arg DeleteEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, deleteEntry, arg.DeleteTime, arg.ID)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.CreatorID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeleteTime,
	)
	return i, err
}

const getDeletedEntry = `-- name: GetDeletedEntry :one
SELECT id, text, creator_id, created_at, updated_at
FROM entries
WHERE id = $1
AND delete_time IS NOT NULL
`

type GetDeletedEntryRow struct {
	ID        int32
	Text      sql.NullString
	CreatorID string
	CreatedAt time.Time
	UpdatedAt sql.NullTime
}

func (q *Queries) GetDeletedEntry(ctx context.Context, id int32) (GetDeletedEntryRow, error) {
	row := q.db.QueryRowContext(ctx, getDeletedEntry, id)
	var i GetDeletedEntryRow
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.CreatorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEntry = `-- name: GetEntry :one
SELECT id, text, creator_id, created_at, updated_at
FROM entries
WHERE id = $1
AND delete_time IS NULL
`

type GetEntryRow struct {
	ID        int32
	Text      sql.NullString
	CreatorID string
	CreatedAt time.Time
	UpdatedAt sql.NullTime
}

func (q *Queries) GetEntry(ctx context.Context, id int32) (GetEntryRow, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i GetEntryRow
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.CreatorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const undeleteEntry = `-- name: UndeleteEntry :one
UPDATE entries
SET delete_time = $1
WHERE id = $2
RETURNING id
`

type UndeleteEntryParams struct {
	DeleteTime sql.NullTime
	ID         int32
}

func (q *Queries) UndeleteEntry(ctx context.Context, arg UndeleteEntryParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, undeleteEntry, arg.DeleteTime, arg.ID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateEntry = `-- name: UpdateEntry :one
UPDATE entries
SET text = $1, updated_at = $2
WHERE id = $3
AND delete_time is null
RETURNING id, text, creator_id, created_at, updated_at
`

type UpdateEntryParams struct {
	Text      sql.NullString
	UpdatedAt sql.NullTime
	ID        int32
}

type UpdateEntryRow struct {
	ID        int32
	Text      sql.NullString
	CreatorID string
	CreatedAt time.Time
	UpdatedAt sql.NullTime
}

func (q *Queries) UpdateEntry(ctx context.Context, arg UpdateEntryParams) (UpdateEntryRow, error) {
	row := q.db.QueryRowContext(ctx, updateEntry, arg.Text, arg.UpdatedAt, arg.ID)
	var i UpdateEntryRow
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.CreatorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
